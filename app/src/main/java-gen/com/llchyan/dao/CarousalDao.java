package com.llchyan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.llchyan.bean.Carousal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAROUSAL".
*/
public class CarousalDao extends AbstractDao<Carousal, Integer> {

    public static final String TABLENAME = "CAROUSAL";

    /**
     * Properties of entity Carousal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Carousal_id = new Property(0, Integer.class, "carousal_id", true, "CAROUSAL_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Sort = new Property(4, Integer.class, "sort", false, "SORT");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Param = new Property(6, String.class, "param", false, "PARAM");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
    };


    public CarousalDao(DaoConfig config) {
        super(config);
    }
    
    public CarousalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAROUSAL\" (" + //
                "\"CAROUSAL_ID\" INTEGER PRIMARY KEY ," + // 0: carousal_id
                "\"TITLE\" TEXT," + // 1: title
                "\"ADDRESS\" TEXT," + // 2: address
                "\"CATEGORY\" TEXT," + // 3: category
                "\"SORT\" INTEGER," + // 4: sort
                "\"TYPE\" TEXT," + // 5: type
                "\"PARAM\" TEXT," + // 6: param
                "\"DATE\" INTEGER);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAROUSAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Carousal entity) {
        stmt.clearBindings();
 
        Integer carousal_id = entity.getCarousal_id();
        if (carousal_id != null) {
            stmt.bindLong(1, carousal_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(5, sort);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String param = entity.getParam();
        if (param != null) {
            stmt.bindString(7, param);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Carousal readEntity(Cursor cursor, int offset) {
        Carousal entity = new Carousal( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // carousal_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // param
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Carousal entity, int offset) {
        entity.setCarousal_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParam(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Carousal entity, long rowId) {
        return entity.getCarousal_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Carousal entity) {
        if(entity != null) {
            return entity.getCarousal_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
